1.	vector<>
	int a[] = {-1, 2, 1, -4}
	vector<int> num(a, a + sizeof(a)/sizeof(int));
	int len = num.size();
	sort(num.begin(), num.end());

	const char* s[]={"bbab","aba","abc"};
	vector<string> v(s, s+3);
	
	vector<int> result;
	result.push_back(1);

	int nrows = 3;
	vector<string> r(nrows);
	string s;
	r[i] += s[i]; //r[i]表示vector中每个字符串string类型。

	vector< vector<char> > board[9];
	vector<string> s(9);
	s[0] = "53..7....";
        s[1] = "6..195...";
        s[2] = ".98....6.";
        s[3] = "8...6...3";
        s[4] = "4..8.3..1";
        s[5] = "7...2...6";
        s[6] = ".6....28.";
        s[7] = "...419..5";
        s[8] = "....8..79";
	for(int i=0; i<9; i++){
		string str = s[i];
		board[i].resize(9);  //***
		for(int j=0; j<9; j++){
			board[i][j] = str[j;]
		}
	}

	const int n = 9;
        bool rows[n][n] = {false};   //each row record each row of board.       
        bool cols[n][n]= {false};    //each row record each col of board.
        bool subbox[n][n] = {false}; //each row record each subbox of board.

	// 初始化 2维数组 
	vector< vector<int> > queue(n, vector<int>(n,0))

	//二维数组 
	int* matrix = new int[m*n];
	delete[] matrix;

	//对结构体排序
	struct Interval {
        int start;
        int end;
        Interval() : start(0), end(0) {}
        Interval(int s, int e) : start(s), end(e) {}
    };
	static bool myfunction(Interval i, Interval j){
        return i.start<=j.start;
    }
	sort(intervals.begin(), intervals.end(), myfunction);

	int x = digits.back();
	digits.pop_back();
	result.insert(result.begin(), '0' + ((abit+bbit+cbit) & 1) );

	vector<vector<int> > result;
    vector<vector<int> > r = combine(S, i);
    result.insert(result.end(), r.begin(), r.end());

2.	map<,>
	map<int, int> mymap;
	int i,j;
	mymap[i] = j;

	if(mymap.count(i) == 0 )
		count <<"found i in mymap"

	map<string, int> mymap;
	mymap["foo"] = 1;
	mymap["too"] = 2;
	for(map<string, int>::iterator it= mymap.begin(); it != mymap.end(); it++){
		cout<<it->first<<"==>"<<it->second<<endl;
	}
	mymap.clear();

3  new
	ListNode *head = new ListNode(0);

4	string
	string str;
	int len = str.length();
	int index, length;
	string substr = str.substr(index, length);
    string substr = str.substr(index); //不指定长度，则到字符串尾.

	string s(n, '.')

5 INT_MAX, INT_MIN

6 stack<>
	stack<char> mystack;
	string s;
	mystack.empty();
	mystack.size();
	mystack.top();
	mystack.pop();
	mystack.push(s[i]);

7 set<>
    set<string> dict;
    string a = {"dog", "s", "gs"}
    dict.insert(a, a+3);

    string s = "dogs"
    set<string>::iterator it;
    for(it=dict.begin(); it!=dict.end(); it++){
        string str = *it;
        if(s.compare(0,str.length(), str) == 0)
        break;
    }

常用函数 
	sort();//vector<int> a; asort(a.begin(), a.end());
	abs(); //int a; abs(a);

	string temp = str.substr(0,1);  //获取第一个 字符；
    int num = atoi(temp.c_str());	//转换字符为数字

	int a, b;
	swap(a,b);

	const char *s;
	!isalpha(*s);
